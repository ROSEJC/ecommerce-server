// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Vai trò người dùng: ADMIN hoặc USER
enum Role {
  ADMIN
  USER
  SELLER
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  cart      Cart?      @relation("CartUser")
  cartId    Int?
  orders    Order[]
  favorites Favorite[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Review    Review[]

  seller Seller?
}

model Seller {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  phone        String?
  taxNumber    String?
  rating       Float? // đánh giá trung bình
  totalRevenue Float? // tổng doanh thu
  createdAt    DateTime @default(now())
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // một category có nhiều products:contentReference[oaicite:5]{index=5}
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quantity Int @default(0)

  cartItems  CartItem[]  @relation("ProductToCartItems")
  orderItems OrderItem[] @relation("ProductToOrderItems")
  reviews    Review[]
  favorites  Favorite[] // ⭐ A product can be favorited by many users

  modelName       String?
  shape           String?
  controls        String?
  features        String[]
  eartip          String?
  batteryBuds     Int?
  batteryCase     Int?
  chargePort      String?
  wingtips        Boolean?
  releaseYear     Int?
  waterResistance String?
  supportedCodecs String[]
  minLatencyMs    Int?
  manufacturer    String?
}

model Review {
  id        Int        @id @default(autoincrement())
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  user      User?      @relation(fields: [userId], references: [id]) // optional
  userId    Int?
  rating    Int
  comment   String?
  createdAt DateTime   @default(now())
  orderItem OrderItem?
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation("CartUser", fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[] @relation("CartToItems") // 
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation("CartToItems", fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation("ProductToCartItems", fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  status          String      @default("Pending")
  items           OrderItem[] @relation("OrderToItems")
  shippingAddress String
  paymentMethod   String
  createdAt       DateTime    @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation("OrderToItems", fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation("ProductToOrderItems", fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float

  review   Review? @relation(fields: [reviewId], references: [id])
  reviewId Int?    @unique // null nếu chưa review
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
